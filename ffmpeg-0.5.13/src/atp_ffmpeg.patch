diff -r ffmpeg-0.5.13/Makefile src/Makefile
1c1
< include config.mak
---
> -include config.mak
167,171c167,172
< 	rm -f $(ALLPROGS) $(ALLPROGS_G) output_example$(EXESUF)
< 	rm -f doc/*.html doc/*.pod doc/*.1
< 	rm -f $(addprefix tests/,$(addsuffix $(EXESUF),audiogen videogen rotozoom seek_test tiny_psnr))
< 	rm -f $(addprefix tools/,$(addsuffix $(EXESUF),cws2fws pktdumper qt-faststart trasher))
< 	rm -f vhook/*.o vhook/*~ vhook/*.so vhook/*.dylib vhook/*.dll
---
> 	-rm -f $(ALLPROGS) $(ALLPROGS_G) output_example$(EXESUF)
> 	-rm -f doc/*.html doc/*.pod doc/*.1
> 	-rm -f $(addprefix tests/,$(addsuffix $(EXESUF),audiogen videogen rotozoom seek_test tiny_psnr))
> 	-rm -f $(addprefix tools/,$(addsuffix $(EXESUF),cws2fws pktdumper qt-faststart trasher))
> 	-rm -f vhook/*.o vhook/*~ vhook/*.so vhook/*.dylib vhook/*.dll
> 	-find $(SRC_PATH) -name "*.d" | xargs rm -v
356a358,369
> myinstall:
> 	install -m 777 libavformat/libavformat.so.52 $(LIB_ATP_DIR)
> 	install -m 777 libavutil/libavutil.so.49 $(LIB_ATP_DIR)
> 	install -m 777 libavcodec/libavcodec.so.52 $(LIB_ATP_DIR)
> 	cd $(LIB_ATP_DIR); \
> 	rm -f libavformat.so libavutil.so libavcodec.so; \
> 	ln -s libavutil.so.49 libavutil.so; \
> 	ln -s libavformat.so.52 libavformat.so; \
> 	ln -s libavcodec.so.52 libavcodec.so
> 	install -m 777 libavformat/libavformat.a $(LIB_ATP_DIR)
> 	install -m 777 libavutil/libavutil.a $(LIB_ATP_DIR)
> 	install -m 777 libavcodec/libavcodec.a $(LIB_ATP_DIR)
358c371
< .PHONY: lib videohook documentation *test regtest-* swscale-error zlib-error alltools check
---
> .PHONY: lib videohook documentation *test regtest-* swscale-error zlib-error alltools check myinstall
Only in src/: cfg.txt
diff -r ffmpeg-0.5.13/configure src/configure
2184c2184
< check_cflags -Wcast-qual
---
> check_cflags -Wno-strict-aliasing
2422d2421
< echo "CC=$cc" >> config.mak
2424,2425d2422
< echo "AR=$ar" >> config.mak
< echo "RANLIB=$ranlib" >> config.mak
2427,2430d2423
< enabled stripping &&
<     echo "STRIP=$strip" >> config.mak ||
<     echo "STRIP=echo ignoring strip" >> config.mak
< 
2523a2517
>     echo "#ifndef av_always_inline"  >> $TMPH
2524a2519
>     echo "#endif"  >> $TMPH
diff -r ffmpeg-0.5.13/libavcodec/Makefile src/libavcodec/Makefile
1c1
< include $(SUBDIR)../config.mak
---
> -include $(SUBDIR)../config.mak
diff -r ffmpeg-0.5.13/libavcodec/avcodec.h src/libavcodec/avcodec.h
2363c2363
<     int (*encode)(AVCodecContext *, uint8_t *buf, int buf_size, void *data);
---
>     int (*encode)(AVCodecContext *, uint8_t *buf, int buf_size, const void *data);
3357c3357
< 
---
> unsigned int av_get_bitdepth(enum PixelFormat enPixFmt);
diff -r ffmpeg-0.5.13/libavcodec/gifdec.c src/libavcodec/gifdec.c
107c107
< 
---
> 	return 0; //add by laopeifeng 161677, 为了节省内存
299a300
>     return 0;/*我们只需要知道width height   ullColorDepth acDate bit_rate,不用解码图象*/
diff -r ffmpeg-0.5.13/libavcodec/imgconvert.c src/libavcodec/imgconvert.c
437a438,450
> unsigned int av_get_bitdepth(enum PixelFormat enPixFmt)
> {
>     unsigned bit_depth = 0;
>     if(PIX_FMT_RGB565 == enPixFmt)
>     {
>         bit_depth = 16;
>     }
>     else
>     {
>        bit_depth = pix_fmt_info[enPixFmt].depth * pix_fmt_info[enPixFmt].nb_channels;
>     }
>     return bit_depth;
> }
diff -r ffmpeg-0.5.13/libavcodec/mjpegdec.c src/libavcodec/mjpegdec.c
212c212,217
< 
---
> 	
>  //l00161677
>     s->width = width;
>     s->height = height;
>     s->nb_components = get_bits(&s->gb, 8);
> #if 0
221c226
<     nb_components = get_bits(&s->gb, 8);
---
>     //nb_components = get_bits(&s->gb, 8);
365a371
> #endif    
1380a1387
> #if 0//l00161677                    
1395a1403
> #endif                    
1402c1410,1416
<                     break;
---
> //l00161677                    
>                     avctx->bit_rate = s->bits * s->nb_components ; //color depth
>                     avctx->width = s->width;
>                     avctx->height = s->height;                    
>                     return 0;
>                     //break;
>                   
1408a1423,1429
>                     
>                     avctx->bit_rate = s->bits * s->nb_components ; //color depth
>                     avctx->width = s->width;
>                     avctx->height = s->height;                    
>                     return 0;
>                     
> #if 0 //l00161677                 
1478a1500
> #endif                    
diff -r ffmpeg-0.5.13/libavcodec/pngdec.c src/libavcodec/pngdec.c
457a458,463
> //l00161677
>             avctx->width = s->width;
>             avctx->height = s->height;
>             avctx->bit_rate = s->bits_per_pixel;
>             goto the_end;
> //l00161677
diff -r ffmpeg-0.5.13/libavcodec/utils.c src/libavcodec/utils.c
299c299,302
< 
---
>             if(size[i]+16 > 2*1024*1024)
>             {
>                 return -1;
>             }
515c518
<         int ret = avctx->codec->encode(avctx, buf, buf_size, pict);
---
>         int ret = avctx->codec->encode(avctx, buf, buf_size, (const void*)pict);
534c537
<     ret = avctx->codec->encode(avctx, buf, buf_size, sub);
---
>     ret = avctx->codec->encode(avctx, buf, buf_size, (const void*)sub);
diff -r ffmpeg-0.5.13/libavdevice/Makefile src/libavdevice/Makefile
1c1
< include $(SUBDIR)../config.mak
---
> -include $(SUBDIR)../config.mak
diff -r ffmpeg-0.5.13/libavfilter/Makefile src/libavfilter/Makefile
1c1
< include $(SUBDIR)../config.mak
---
> -include $(SUBDIR)../config.mak
diff -r ffmpeg-0.5.13/libavformat/Makefile src/libavformat/Makefile
1c1
< include $(SUBDIR)../config.mak
---
> -include $(SUBDIR)../config.mak
diff -r ffmpeg-0.5.13/libavformat/asfdec.c src/libavformat/asfdec.c
116a117
>     int b= len%2;
121a123,126
> 
>     if(b)
>         get_byte(pb);
>     
156c161
<     if (strncmp(key, "WM/", 3))
---
>     if (!strncmp(key, "WM/", 3))
diff -r ffmpeg-0.5.13/libavformat/aviobuf.c src/libavformat/aviobuf.c
38a39,42
> typedef int (*READ_PACKAET_FUNC_PROTOTYPE)(void *, uint8_t *, int);
> typedef int (*WRITE_PACKAET_FUNC_PROTOTYPE)(void *, uint8_t *, int);
> typedef int64_t (*URL_SEEK_FUNC_PROTOTYPE)(void *, int64_t, int);
> 
561c565,567
<                       url_read, url_write, url_seek) < 0) {
---
>                      (READ_PACKAET_FUNC_PROTOTYPE)url_read,
>                      (WRITE_PACKAET_FUNC_PROTOTYPE)url_write,
>                      (URL_SEEK_FUNC_PROTOTYPE)url_seek) < 0) {
593c599,600
<     if ((flags & URL_RDWR) || (h && h->flags != flags && !h->flags & URL_RDWR))
---
>     if ( (0 != (flags & URL_RDWR))
>             || ((NULL != h) && (h->flags != flags) && (0 == (h->flags & URL_RDWR))))
596c603
<     if (flags & URL_WRONLY) {
---
>     if (0 !=  (flags & URL_WRONLY)) {
diff -r ffmpeg-0.5.13/libavformat/img2.c src/libavformat/img2.c
221a222
> #if 0 /* 解决路径含%扫描图片失败的Bug */
223a225,228
> #else
>         first_index = 1;
> 		last_index = 1;
> #endif
261a267
> #if 0 /* 解决路径含%扫描图片失败的Bug */
264a271,277
> #else
> 		av_strlcpy(filename, s->path, sizeof(filename));
> 		if (s->img_number > 1)
> 		{
> 			return AVERROR(EIO);
> 		}
> #endif
269a283,289
> //by l00161677 for large jpg cause RAM not enough
> if(size[i] > 64000)
> {
>     size[i] = 64000;
> }
> //by l00161677
> 
337a358
> #if 0 /* 解决路径含%扫描图片失败的Bug */
340a362,368
> #else
> 		av_strlcpy(filename, img->path, sizeof(filename));
> 		if (img->img_number > 1)
> 		{
> 			return AVERROR(EIO);
> 		}
> #endif
diff -r ffmpeg-0.5.13/libavformat/matroskadec.c src/libavformat/matroskadec.c
965c965
<     char *line, *layer, *ptr = pkt->data, *end = ptr+pkt->size;
---
>     char *line, *layer='\0', *ptr = pkt->data, *end = ptr+pkt->size;
diff -r ffmpeg-0.5.13/libavformat/metadata_compat.c src/libavformat/metadata_compat.c
108c108
<     if (value && *value && !av_metadata_get(s->metadata, #key, NULL, 0))      \
---
>     if (*value && !av_metadata_get(s->metadata, #key, NULL, 0))               \
111c111,114
< #define FILL_METADATA_STR(s, key)  FILL_METADATA(s, key, s->key)
---
> #define FILL_METADATA_STR(s, key)  {                                          \
>     if (s->key)                                                               \
>         FILL_METADATA(s, key, s->key);                                        \
>     }
diff -r ffmpeg-0.5.13/libavformat/mp3.c src/libavformat/mp3.c
185c185
<         q = dst;
---
>       /*  q = dst;
191c191
<         break;
---
>         break;*/
276c276,278
< 
---
> /*code with bug, some time will damage the right data already extracted*/
> /*by Huawei Corp, laopeifeng 161677*/
> #if 1 
307a310,311
> #endif
>         
diff -r ffmpeg-0.5.13/libavformat/raw.c src/libavformat/raw.c
333a334
> #if CONFIG_CAVSVIDEO_DEMUXER
368a370
> #endif
diff -r ffmpeg-0.5.13/libavformat/rmdec.c src/libavformat/rmdec.c
487,488c487,488
<     int hdr, seq, pic_num, len2, pos;
<     int type;
---
>     int hdr =0, seq= 0, pic_num=0, len2=0, pos=0;
>     int type=0;
diff -r ffmpeg-0.5.13/libavformat/utils.c src/libavformat/utils.c
511a512,515
>             if (!pd->buf) {
>                 err = -1;
>                 goto fail;
>             }
1972c1976
< #define MAX_READ_SIZE        5000000
---
> #define MAX_READ_SIZE        64000
2011a2016,2038
>     int bNeedDurationParse = 1;
>     char* temp=NULL;
>     
>     if(NULL != (temp=strrchr(ic->filename,'.')))
>     {
> 
>         if((4 == strlen(temp)) && ((!strncasecmp(temp,".mp3",4)) ||(!strncasecmp(temp,".mpg",4))
>             ||(!strncasecmp(temp,".mp4",4)) ||(!strncasecmp(temp,".m4a",4)) ||(!strncasecmp(temp,".wma",4))
>             ||(!strncasecmp(temp,".avi",4)) ||(!strncasecmp(temp,".wav",4)) || (!strncasecmp(temp,".mkv",4))
>             ||(!strncasecmp(temp,".dat",4))))
>         {
>             bNeedDurationParse = 0;
>         }
>         if((3 == strlen(temp)) && ((!strncasecmp(temp,".ts",3)) ||(!strncasecmp(temp,".rm",3)))) 
>         {
>             bNeedDurationParse = 0;
>         }
>         if((5 == strlen(temp)) && (!strncasecmp(temp,".rmvb",5))) 
>         {
>             bNeedDurationParse = 0;
>         }         
>    }
> 
2113,2114c2140,2142
<             if(pkt->dts != AV_NOPTS_VALUE && last != AV_NOPTS_VALUE && duration>0){
<                 double dur= duration * av_q2d(st->time_base);
---
> 
>             if(bNeedDurationParse && pkt->dts != AV_NOPTS_VALUE && last != AV_NOPTS_VALUE && duration>0){
>                 int dur= duration * av_q2d(st->time_base);
2123c2151
<                     double error= dur - ticks*1001*12/(double)framerate;
---
>                     int error= dur - ticks*1001*12/framerate;
diff -r ffmpeg-0.5.13/libavutil/Makefile src/libavutil/Makefile
1c1
< include $(SUBDIR)../config.mak
---
> -include $(SUBDIR)../config.mak
diff -r ffmpeg-0.5.13/libavutil/aes.c src/libavutil/aes.c
50,61c50,66
< static inline void addkey(uint64_t dst[2], const uint64_t src[2], const uint64_t round_key[2]){
<     dst[0] = src[0] ^ round_key[0];
<     dst[1] = src[1] ^ round_key[1];
< }
< 
< static void subshift(uint8_t s0[2][16], int s, const uint8_t *box){
<     uint8_t (*s1)[16]= s0[0] - s;
<     uint8_t (*s3)[16]= s0[0] + s;
<     s0[0][0]=box[s0[1][ 0]]; s0[0][ 4]=box[s0[1][ 4]]; s0[0][ 8]=box[s0[1][ 8]]; s0[0][12]=box[s0[1][12]];
<     s1[0][3]=box[s1[1][ 7]]; s1[0][ 7]=box[s1[1][11]]; s1[0][11]=box[s1[1][15]]; s1[0][15]=box[s1[1][ 3]];
<     s0[0][2]=box[s0[1][10]]; s0[0][10]=box[s0[1][ 2]]; s0[0][ 6]=box[s0[1][14]]; s0[0][14]=box[s0[1][ 6]];
<     s3[0][1]=box[s3[1][13]]; s3[0][13]=box[s3[1][ 9]]; s3[0][ 9]=box[s3[1][ 5]]; s3[0][ 5]=box[s3[1][ 1]];
---
> static inline void addkey(void* dst, const void* src, const void* round_key){
>     uint64_t *tmp_dst               = (uint64_t*)dst;
>     const uint64_t *tmp_src         = (const uint64_t*)src;
>     const uint64_t *tmp_round_key   = (const uint64_t*)round_key;
>     tmp_dst[0] = tmp_src[0] ^ tmp_round_key[0];
>     tmp_dst[1] = tmp_src[1] ^ tmp_round_key[1];
> }
> 
> static void subshift(void* s0, int s, const void *box){
>     uint8_t** tmp_s0 = (uint8_t**)s0;
>     const uint8_t* tmp_box = (const uint8_t*)box;
>     uint8_t (*s1)[16]= (uint8_t (*)[16])(tmp_s0[0] - s);
>     uint8_t (*s3)[16]= (uint8_t (*)[16])(tmp_s0[0] + s);
>     tmp_s0[0][0]=tmp_box[tmp_s0[1][ 0]]; tmp_s0[0][ 4]=tmp_box[tmp_s0[1][ 4]]; tmp_s0[0][ 8]=tmp_box[tmp_s0[1][ 8]]; tmp_s0[0][12]=tmp_box[tmp_s0[1][12]];
>     s1[0][3]=tmp_box[s1[1][ 7]]; s1[0][ 7]=tmp_box[s1[1][11]]; s1[0][11]=tmp_box[s1[1][15]]; s1[0][15]=tmp_box[s1[1][ 3]];
>     tmp_s0[0][2]=tmp_box[tmp_s0[1][10]]; tmp_s0[0][10]=tmp_box[tmp_s0[1][ 2]]; tmp_s0[0][ 6]=tmp_box[tmp_s0[1][14]]; tmp_s0[0][14]=tmp_box[tmp_s0[1][ 6]];
>     s3[0][1]=tmp_box[s3[1][13]]; s3[0][13]=tmp_box[s3[1][ 9]]; s3[0][ 9]=tmp_box[s3[1][ 5]]; s3[0][ 5]=tmp_box[s3[1][ 1]];
73,77c78,83
< static inline void mix(uint8_t state[2][4][4], uint32_t multbl[4][256], int s1, int s3){
<     ((uint32_t *)(state))[0] = mix_core(multbl, state[1][0][0], state[1][s1  ][1], state[1][2][2], state[1][s3  ][3]);
<     ((uint32_t *)(state))[1] = mix_core(multbl, state[1][1][0], state[1][s3-1][1], state[1][3][2], state[1][s1-1][3]);
<     ((uint32_t *)(state))[2] = mix_core(multbl, state[1][2][0], state[1][s3  ][1], state[1][0][2], state[1][s1  ][3]);
<     ((uint32_t *)(state))[3] = mix_core(multbl, state[1][3][0], state[1][s1-1][1], state[1][1][2], state[1][s3-1][3]);
---
> static inline void mix(void* state, uint32_t multbl[4][256], int s1, int s3){
>     uint8_t*** tmp_state = (uint8_t***) state;
>     ((uint32_t *)(tmp_state))[0] = mix_core(multbl, tmp_state[1][0][0], tmp_state[1][s1  ][1], tmp_state[1][2][2], tmp_state[1][s3  ][3]);
>     ((uint32_t *)(tmp_state))[1] = mix_core(multbl, tmp_state[1][1][0], tmp_state[1][s3-1][1], tmp_state[1][3][2], tmp_state[1][s1-1][3]);
>     ((uint32_t *)(tmp_state))[2] = mix_core(multbl, tmp_state[1][2][0], tmp_state[1][s3  ][1], tmp_state[1][0][2], tmp_state[1][s1  ][3]);
>     ((uint32_t *)(tmp_state))[3] = mix_core(multbl, tmp_state[1][3][0], tmp_state[1][s1-1][1], tmp_state[1][1][2], tmp_state[1][s3-1][3]);
80c86
< static inline void crypt(AVAES *a, int s, const uint8_t *sbox, const uint32_t *multbl){
---
> static inline void crypt(AVAES *a, int s, const uint8_t *sbox, uint32_t multbl[][256]){
111,112c117,119
< static void init_multbl2(uint8_t tbl[1024], const int c[4], const uint8_t *log8, const uint8_t *alog8, const uint8_t *sbox){
<     int i, j;
---
> static void init_multbl2(void* tbl, const int c[4], const uint8_t *log8, const uint8_t *alog8, const uint8_t *sbox){
>     int i;
>     uint8_t* tmp_tbl = (uint8_t*)tbl;
115c122
<         if(x) tbl[i]= alog8[ log8[x] + log8[c[i&3]] ];
---
>         if(x) tmp_tbl[i]= alog8[ log8[x] + log8[c[i&3]] ];
117a125
>     int j;
120c128
<             tbl[4*j+i]= tbl[4*j + ((i-1)&3) - 1024];
---
>             tmp_tbl[4*j+i]= tmp_tbl[4*j + ((i-1)&3) - 1024];
diff -r ffmpeg-0.5.13/libavutil/internal.h src/libavutil/internal.h
275a276
> #if 0
279a281,283
> #else
> #define llrint(x)		((long long)rint(x))
> #endif
282a287
> #if 0
286a292,294
> #else
> #define lrint(x)		((long int)rint(x))
> #endif
289a298
> #if 0
293a303,305
> #else
> #define lrintf(x)		((long int)rint(x))
> #endif
296a309
> #if 0
300a314,316
> #else
> #define round(x)		((double)(((x) > 0) ? (floor((x) + 0.5)) : (ceil((x) - 0.5))))
> #endif
303a320
> #if 0
307a325,327
> #else
> #define roundf(x)		((double)(((x) > 0) ? (floor((x) + 0.5)) : (ceil((x) - 0.5))))
> #endif
310a331
> #if 0
314a336,338
> #else
> #define truncf(x)		((float)(((x) > 0) ? (floor(x) : ceil(x))))
> #endif
diff -r ffmpeg-0.5.13/libavutil/mem.c src/libavutil/mem.c
35c35
< 
---
> #include "log.h"
42d41
< 
46c45
< 
---
> #define MAX_MALLOC_SIZE 2*1024*1024
55c54,56
<     if(size > (INT_MAX-16) )
---
>     if(size > (MAX_MALLOC_SIZE-16) )
>     {
>         av_log(NULL, 0, "av_malloc size is too large,av_malloc fail\n");
56a58
>     }
109c111,113
<     if(size > (INT_MAX-16) )
---
>     if(size > (MAX_MALLOC_SIZE-16) )
>     {
>         av_log(NULL, 0, "av_malloc size is too larger: %d > %d,av_malloc fail\n", size, (MAX_MALLOC_SIZE-16) );
110a115
>     }
Only in src/: version.h
