.SS ah
This module matches the parameters in Authentication header of IPsec packets.
.TP
.BR "--ahspi " "[!] \fIspi\fP[:\fIspi\fP]"
Matches SPI.
.TP
.BR "--ahlen " "[!] \fIlength"
Total length of this header in octets.
.TP
.BI "--ahres"
Matches if the reserved field is filled with zero.
.SS comment
Allows you to add comments (up to 256 characters) to any rule.
.TP
.BI "--comment " "comment"
.TP
Example:
iptables -A INPUT -s 192.168.0.0/16 -m comment --comment "A privatized IP block"
.SS connbytes
Match by how many bytes or packets a connection (or one of the two
flows constituting the connection) have tranferred so far, or by
average bytes per packet.

The counters are 64bit and are thus not expected to overflow ;)

The primary use is to detect long-lived downloads and mark them to be
scheduled using a lower priority band in traffic control.

The transfered bytes per connection can also be viewed through
/proc/net/ip_conntrack and accessed via ctnetlink
.TP
[\fB!\fR]\fB --connbytes \fIfrom\fB:\fR[\fIto\fR]
match packets from a connection whose packets/bytes/average packet
size is more than FROM and less than TO bytes/packets. if TO is
omitted only FROM check is done. "!" is used to match packets not
falling in the range.
.TP
\fB--connbytes-dir\fR [\fBoriginal\fR|\fBreply\fR|\fBboth\fR]
which packets to consider
.TP
\fB--connbytes-mode\fR [\fBpackets\fR|\fBbytes\fR|\fBavgpkt\fR]
whether to check the amount of packets, number of bytes transferred or
the average size (in bytes) of all packets received so far. Note that
when "both" is used together with "avgpkt", and data is going (mainly)
only in one direction (for example HTTP), the average packet size will
be about half of the actual data packets.
.TP
Example:
iptables .. -m connbytes --connbytes 10000:100000 --connbytes-dir both --connbytes-mode bytes ...
.SS connlimit
Allows you to restrict the number of parallel connections to a server per
client IP address (or client address block).
.TP
[\fB!\fR] \fB--connlimit-above \fIn\fR
Match if the number of existing connections is (not) above \fIn\fR.
.TP
\fB--connlimit-mask\fR \fIprefix_length\fR
Group hosts using the prefix length. For IPv4, this must be a number between
(including) 0 and 32. For IPv6, between 0 and 128.
.P
Examples:
.TP
# allow 2 telnet connections per client host
ip6tables -A INPUT -p tcp --syn --dport 23 -m connlimit --connlimit-above 2 -j REJECT
.TP
# you can also match the other way around:
ip6tables -A INPUT -p tcp --syn --dport 23 -m connlimit ! --connlimit-above 2 -j ACCEPT
.TP
# limit the number of parallel HTTP requests to 16 per class C sized \
network (24 bit netmask)
ip6tables -p tcp --syn --dport 80 -m connlimit --connlimit-above 16
--connlimit-mask 24 -j REJECT
.TP
# limit the number of parallel HTTP requests to 16 for the link local network \
(ipv6)
ip6tables -p tcp --syn --dport 80 -s fe80::/64 -m connlimit --connlimit-above
16 --connlimit-mask 64 -j REJECT
.SS connmark
This module matches the netfilter mark field associated with a connection
(which can be set using the
.B CONNMARK
target below).
.TP
.BI "--mark " "value[/mask]"
Matches packets in connections with the given mark value (if a mask is
specified, this is logically ANDed with the mark before the
comparison).
.SS dccp
.TP
\fB--source-port\fR,\fB--sport \fR[\fB!\fR] \fIport\fR[\fB:\fIport\fR]
.TP
\fB--destination-port\fR,\fB--dport \fR[\fB!\fR] \fIport\fR[\fB:\fIport\fR]
.TP
\fB--dccp-types\fR [\fB!\fR] \fImask\fP
Match when the DCCP packet type is one of 'mask'. 'mask' is a comma-separated
list of packet types.  Packet types are: 
.BR "REQUEST RESPONSE DATA ACK DATAACK CLOSEREQ CLOSE RESET SYNC SYNCACK INVALID" .
.TP
\fB--dccp-option\fR [\fB!\fR\] \fInumber\fP
Match if DCP option set.
.SS dscp
This module matches the 6 bit DSCP field within the TOS field in the
IP header.  DSCP has superseded TOS within the IETF.
.TP
.BI "--dscp " "value"
Match against a numeric (decimal or hex) value [0-63].
.TP
.BI "--dscp-class " "\fIDiffServ Class\fP"
Match the DiffServ class. This value may be any of the
BE, EF, AFxx or CSx classes.  It will then be converted
into it's according numeric value.
.SS dst
This module matches the parameters in Destination Options header
.TP
.BR "--dst-len " "[!] \fIlength"
Total length of this header in octets.
.TP
.BR "--dst-opts " "\fItype\fP[:\fIlength\fP][,\fItype\fP[:\fIlength\fP]...]"
numeric type of option and the length of the option data in octets.
.SS esp
This module matches the SPIs in ESP header of IPsec packets.
.TP
.BR "--espspi " "[!] \fIspi\fP[:\fIspi\fP]"
.SS eui64
This module matches the EUI-64 part of a stateless autoconfigured IPv6 address.
It compares the EUI-64 derived from the source MAC address in Ethernet frame
with the lower 64 bits of the IPv6 source address. But "Universal/Local"
bit is not compared. This module doesn't match other link layer frame, and
is only valid in the
.BR PREROUTING ,
.BR INPUT
and
.BR FORWARD
chains.
.SS frag
This module matches the parameters in Fragment header.
.TP
.BR "--fragid " "[!] \fIid\fP[:\fIid\fP]"
Matches the given Identification or range of it.
.TP
.BR "--fraglen " "[!] \fIlength\fP"
This option cannot be used with kernel version 2.6.10 or later. The length of
Fragment header is static and this option doesn't make sense.
.TP
.BR "--fragres "
Matches if the reserved fields are filled with zero.
.TP
.BR "--fragfirst "
Matches on the first fragment.
.TP
.BR "[--fragmore]"
Matches if there are more fragments.
.TP
.BR "[--fraglast]"
Matches if this is the last fragement.
.SS hashlimit
This patch adds a new match called 'hashlimit'.
The idea is to have something like 'limit', but either per
destination-ip or per (destip,destport) tuple.

It gives you the ability to express
.IP
 '1000 packets per second for every host in 192.168.0.0/16'
.IP
 '100 packets per second for every service of 192.168.1.1'
.P
with a single iptables rule.
.TP
.BI "--hashlimit " "rate"
A rate just like the limit match
.TP
.BI "--hashlimit-burst " "num"
Burst value, just like limit match
.TP
.BI "--hashlimit-mode " "dstip,srcip,dstport,srcport"
A comma-separated list of objects to take into consideration
.TP
.BI "--hashlimit-name " "foo"
The name for the /proc/net/ipt_hashlimit/foo entry
.TP
.BI "--hashlimit-htable-size " "num"
The number of buckets of the hash table
.TP
.BI "--hashlimit-htable-max " "num"
Maximum entries in the hash
.TP
.BI "--hashlimit-htable-expire " "num"
After how many miliseconds do hash entries expire
.TP
.BI "--hashlimit-htable-gcinterval " "num"
How many miliseconds between garbage collection intervals
.SS hbh
This module matches the parameters in Hop-by-Hop Options header
.TP
.BR "--hbh-len " "[!] \fIlength\fP"
Total length of this header in octets.
.TP
.BR "--hbh-opts " "\fItype\fP[:\fIlength\fP][,\fItype\fP[:\fIlength\fP]...]"
numeric type of option and the length of the option data in octets.
.SS helper
This module matches packets related to a specific conntrack-helper.
.TP
.BI "--helper " "string"
Matches packets related to the specified conntrack-helper.
.RS
.PP
string can be "ftp" for packets related to a ftp-session on default port.
For other ports append -portnr to the value, ie. "ftp-2121".
.PP
Same rules apply for other conntrack-helpers.
.RE
.SS hl
This module matches the Hop Limit field in the IPv6 header.
.TP
.BR "--hl-eq " "[!] \fIvalue\fP"
Matches if Hop Limit equals \fIvalue\fP.
.TP
.BI "--hl-lt " "value"
Matches if Hop Limit is less than \fIvalue\fP.
.TP
.BI "--hl-gt " "value"
Matches if Hop Limit is greater than \fIvalue\fP.
.SS icmp6
This extension can be used if `--protocol ipv6-icmp' or `--protocol icmpv6' is
specified. It provides the following option:
.TP
.BR "--icmpv6-type " "[!] \fItype\fP[/\fIcode\fP]|\fItypename\fP"
This allows specification of the ICMPv6 type, which can be a numeric
ICMPv6
.IR type ,
.IR type
and
.IR code ,
or one of the ICMPv6 type names shown by the command
.nf
 ip6tables -p ipv6-icmp -h
.fi
.SS ipv6header
This module matches IPv6 extension headers and/or upper layer header.
.TP
.BR "--header " "[!] \fIheader\fP[,\fIheader\fP...]"
Matches the packet which EXACTLY includes all specified headers. The headers
encapsulated with ESP header are out of scope.
.IR header
can be
.IR hop | hop-by-hop
(Hop-by-Hop Options header),
.IR dst
(Destination Options header),
.IR route
(Routing header),
.IR frag
(Fragment header),
.IR auth
(Authentication header),
.IR esp
(Encapsulating Security Payload header),
.IR none
(No Next header) which matches 59 in the 'Next Header field' of IPv6 header or any IPv6 extension headers, or
.IR proto
which matches any upper layer protocol header. A protocol name from /etc/protocols and numeric value also allowed. The number 255 is equivalent to
.IR proto .
.TP
.BR "[--soft]"
Matches if the packet includes all specified headers with
.BR --header ,
AT LEAST.
.SS length
This module matches the length of the IPv6 payload in octets, or range of it.
IPv6 header itself isn't counted.
.TP
.BR "--length " "[!] \fIlength\fP[:\fIlength\fP]"
.SS limit
This module matches at a limited rate using a token bucket filter.
A rule using this extension will match until this limit is reached
(unless the `!' flag is used).  It can be used in combination with the
.B LOG
target to give limited logging, for example.
.TP
.BI "--limit " "rate"
Maximum average matching rate: specified as a number, with an optional
`/second', `/minute', `/hour', or `/day' suffix; the default is
3/hour.
.TP
.BI "--limit-burst " "number"
Maximum initial number of packets to match: this number gets
recharged by one every time the limit specified above is not reached,
up to this number; the default is 5.
.SS mac
.TP
.BR "--mac-source " "[!] \fIaddress\fP"
Match source MAC address.  It must be of the form XX:XX:XX:XX:XX:XX.
Note that this only makes sense for packets coming from an Ethernet device
and entering the
.BR PREROUTING ,
.B FORWARD
or
.B INPUT
chains.
.SS mark
This module matches the netfilter mark field associated with a packet
(which can be set using the
.B MARK
target below).
.TP
.BR "--mark " "\fIvalue\fP[/\fImask\fP]"
Matches packets with the given unsigned mark value (if a \fImask\fP is
specified, this is logically ANDed with the \fImask\fP before the
comparison).
.SS mh
This extension is loaded if `--protocol ipv6-mh' or `--protocol mh' is
specified. It provides the following option:
.TP
.BR "--mh-type " "[!] \fItype\fP[:\fItype\fP]"
This allows specification of the Mobility Header(MH) type, which can be
a numeric MH
.IR type ,
.IR type
or one of the MH type names shown by the command
.nf
 ip6tables -p ipv6-mh -h
.fi
.SS multiport
This module matches a set of source or destination ports.  Up to 15
ports can be specified.  It can only be used in conjunction
with
.B "-p tcp"
or
.BR "-p udp" .
.TP
.BR "--source-ports " "\fI[!] port\fP[,\fIport\fP[,\fIport\fP...]]"
Match if the source port is one of the given ports.  The flag
.B --sports
is a convenient alias for this option.
.TP
.BR "--destination-ports " "\fI[!] port\fP[,\fIport\fP[,\fIport\fP...]]"
Match if the destination port is one of the given ports.  The flag
.B --dports
is a convenient alias for this option.
.TP
.BR "--ports " "\fI[!] port\fP[,\fIport\fP[,\fIport\fP...]]"
Match if the both the source and destination ports are equal to each
other and to one of the given ports.
.SS owner
This module attempts to match various characteristics of the packet
creator, for locally-generated packets.  It is only valid in the
.B OUTPUT
chain, and even this some packets (such as ICMPv6 ping responses) may
have no owner, and hence never match.  This is regarded as experimental.
.TP
.BI "--uid-owner " "userid"
Matches if the packet was created by a process with the given
effective user id.
.TP
.BI "--gid-owner " "groupid"
Matches if the packet was created by a process with the given
effective group id.
.TP
.BI "--pid-owner " "processid"
Matches if the packet was created by a process with the given
process id.
.TP
.BI "--sid-owner " "sessionid"
Matches if the packet was created by a process in the given session
group.
.TP
.B NOTE: pid, sid and command matching are broken on SMP
.SS physdev
This module matches on the bridge port input and output devices enslaved
to a bridge device. This module is a part of the infrastructure that enables
a transparent bridging IP firewall and is only useful for kernel versions
above version 2.5.44.
.TP
.BR --physdev-in " [!] \fIname\fP"
Name of a bridge port via which a packet is received (only for
packets entering the
.BR INPUT ,
.B FORWARD
and
.B PREROUTING
chains). If the interface name ends in a "+", then any
interface which begins with this name will match. If the packet didn't arrive
through a bridge device, this packet won't match this option, unless '!' is used.
.TP
.BR --physdev-out " [!] \fIname\fP"
Name of a bridge port via which a packet is going to be sent (for packets
entering the
.BR FORWARD ,
.B OUTPUT
and
.B POSTROUTING
chains).  If the interface name ends in a "+", then any
interface which begins with this name will match. Note that in the
.BR nat " and " mangle
.B OUTPUT
chains one cannot match on the bridge output port, however one can in the
.B "filter OUTPUT"
chain. If the packet won't leave by a bridge device or it is yet unknown what
the output device will be, then the packet won't match this option, unless
'!' is used.
.TP
.RB "[!] " --physdev-is-in
Matches if the packet has entered through a bridge interface.
.TP
.RB "[!] " --physdev-is-out
Matches if the packet will leave through a bridge interface.
.TP
.RB "[!] " --physdev-is-bridged
Matches if the packet is being bridged and therefore is not being routed.
This is only useful in the FORWARD and POSTROUTING chains.
.SS pkttype
This module matches the link-layer packet type.
.TP
.BI "--pkt-type " "[\fIunicast\fP|\fIbroadcast\fP|\fImulticast\fP]"
.SS policy
This modules matches the policy used by IPsec for handling a packet.
.TP
.BI "--dir " "in|out"
Used to select whether to match the policy used for decapsulation or the
policy that will be used for encapsulation.
.B in
is valid in the
.B PREROUTING, INPUT and FORWARD
chains,
.B out
is valid in the
.B POSTROUTING, OUTPUT and FORWARD
chains.
.TP
.BI "--pol " "none|ipsec"
Matches if the packet is subject to IPsec processing.
.TP
.BI "--strict"
Selects whether to match the exact policy or match if any rule of
the policy matches the given policy.
.TP
.BI "--reqid " "id"
Matches the reqid of the policy rule. The reqid can be specified with
.B setkey(8)
using
.B unique:id
as level.
.TP
.BI "--spi " "spi"
Matches the SPI of the SA.
.TP
.BI "--proto " "ah|esp|ipcomp"
Matches the encapsulation protocol.
.TP
.BI "--mode " "tunnel|transport"
Matches the encapsulation mode.
.TP
.BI "--tunnel-src " "addr[/mask]"
Matches the source end-point address of a tunnel mode SA.
Only valid with --mode tunnel.
.TP
.BI "--tunnel-dst " "addr[/mask]"
Matches the destination end-point address of a tunnel mode SA.
Only valid with --mode tunnel.
.TP
.BI "--next"
Start the next element in the policy specification. Can only be used with
--strict
.SS quota
Implements network quotas by decrementing a byte counter with each
packet.
.TP
.BI "--quota " "bytes"
The quota in bytes.
.P
.SS rt
Match on IPv6 routing header
.TP
.BR "--rt-type" " [!] \fItype\fP"
Match the type (numeric).
.TP
.BR "--rt-segsleft" " [!] \fInum\fP[:\fInum\fP]"
Match the `segments left' field (range).
.TP
.BR "--rt-len" " [!] \fIlength\fP"
Match the length of this header.
.TP
.BR "--rt-0-res"
Match the reserved field, too (type=0)
.TP
.BR "--rt-0-addrs" " \fIADDR\fP[,\fIADDR\fP...]"
Match type=0 addresses (list).
.TP
.BR "--rt-0-not-strict"
List of type=0 addresses is not a strict list.
.SS state
This module, when combined with connection tracking, allows access to
the connection tracking state for this packet.
.TP
.BI "--state " "state"
Where state is a comma separated list of the connection states to
match.  Possible states are
.B INVALID
meaning that the packet could not be identified for some reason which
includes running out of memory and ICMP errors which don't correspond to any
known connection,
.B ESTABLISHED
meaning that the packet is associated with a connection which has seen
packets in both directions,
.B NEW
meaning that the packet has started a new connection, or otherwise
associated with a connection which has not seen packets in both
directions, and
.B RELATED
meaning that the packet is starting a new connection, but is
associated with an existing connection, such as an FTP data transfer,
or an ICMP error.
.SS statistic
This module matches packets based on some statistic condition.
It supports two distinct modes settable with the 
.B --mode
option.
.TP
Supported options:
.TP
.BI "--mode " "mode"
Set the matching mode of the matching rule, supported modes are
.B random
and
.B nth. 
.TP
.BI "--probability " "p"
Set the probability from 0 to 1 for a packet to be randomly
matched. It works only with the
.B random
mode.
.TP
.BI "--every " "n"
Match one packet every nth packet. It works only with the
.B nth
mode (see also the 
.B --packet
option).
.TP
.BI "--packet " "p"
Set the initial counter value (0 <= p <= n-1, default 0) for the
.B nth 
mode.
.SS tcp
These extensions can be used if `--protocol tcp' is specified. It
provides the following options:
.TP
.BR "--source-port " "[!] \fIport\fP[:\fIport\fP]"
Source port or port range specification. This can either be a service
name or a port number. An inclusive range can also be specified,
using the format
.IR port : port .
If the first port is omitted, "0" is assumed; if the last is omitted,
"65535" is assumed.
If the second port greater then the first they will be swapped.
The flag
.B --sport
is a convenient alias for this option.
.TP
.BR "--destination-port " "[!] \fIport\fP[:\fIport\fP]"
Destination port or port range specification.  The flag
.B --dport
is a convenient alias for this option.
.TP
.BR "--tcp-flags " "[!] \fImask\fP \fIcomp\fP"
Match when the TCP flags are as specified.  The first argument is the
flags which we should examine, written as a comma-separated list, and
the second argument is a comma-separated list of flags which must be
set.  Flags are: 
.BR "SYN ACK FIN RST URG PSH ALL NONE" .
Hence the command
.nf
 ip6tables -A FORWARD -p tcp --tcp-flags SYN,ACK,FIN,RST SYN
.fi
will only match packets with the SYN flag set, and the ACK, FIN and
RST flags unset.
.TP
.B "[!] --syn"
Only match TCP packets with the SYN bit set and the ACK,RST and FIN bits
cleared.  Such packets are used to request TCP connection initiation;
for example, blocking such packets coming in an interface will prevent
incoming TCP connections, but outgoing TCP connections will be
unaffected.
It is equivalent to \fB--tcp-flags SYN,RST,ACK,FIN SYN\fP.
If the "!" flag precedes the "--syn", the sense of the
option is inverted.
.TP
.BR "--tcp-option " "[!] \fInumber\fP"
Match if TCP option set.
.SS tcpmss
This matches the TCP MSS (maximum segment size) field of the TCP header.  You can only use this on TCP SYN or SYN/ACK packets, since the MSS is only negotiated during the TCP handshake at connection startup time.
.TP
.BI "[!] "--mss " value[:value]"
Match a given TCP MSS value or range.
.SS time
This matches if the packet arrival time/date is within a given range. All
options are optional, but are ANDed when specified.
.TP
\fB--datestart\fR \fIYYYY\fR[\fB-\fR\fIMM\fR[\fB-\fR\fIDD\fR[\fBT\fR\fIhh\fR[\fB:\fR\fImm\fR[\fB:\fR\fIss\fR]]]]]
.TP
\fB--datestop\fR \fIYYYY\fR[\fB-\fR\fIMM\fR[\fB-\fR\fIDD\fR[\fBT\fR\fIhh\fR[\fB:\fR\fImm\fR[\fB:\fR\fIss\fR]]]]]
.IP
Only match during the given time, which must be in ISO 8601 "T" notation.
The possible time range is 1970-01-01T00:00:00 to 2038-01-19T04:17:07.
.IP
If --datestart or --datestop are not specified, it will default to 1970-01-01
and 2038-01-19, respectively.
.TP
\fB--timestart\fR \fIhh\fR\fB:\fR\fImm\fR[\fB:\fR\fIss\fR]
.TP
\fB--timestop\fR \fIhh\fR\fB:\fR\fImm\fR[\fB:\fR\fIss\fR]
.IP
Only match during the given daytime. The possible time range is 00:00:00 to
23:59:59. Leading zeroes are allowed (e.g. "06:03") and correctly interpreted
as base-10.
.TP
[\fB!\fR] \fB--monthday\fR \fIday\fR[\fB,\fR\fIday\fR...]
.IP
Only match on the given days of the month. Possible values are \fB1\fR
to \fB31\fR. Note that specifying \fB31\fR will of course not match
on months which do not have a 31st day; the same goes for 28- or 29-day
February.
.TP
[\fB!\fR] \fB--weekdays\fR \fIday\fR[\fB,\fR\fIday\fR...]
.IP
Only match on the given weekdays. Possible values are \fBMon\fR, \fBTue\fR,
\fBWed\fR, \fBThu\fR, \fBFri\fR, \fBSat\fR, \fBSun\fR, or values from \fB1\fR
to \fB7\fR, respectively. You may also use two-character variants (\fBMo\fR,
\fBTu\fR, etc.).
.TP
\fB--utc\fR
.IP
Interpret the times given for \fB--datestart\fR, \fB--datestop\fR,
\fB--timestart\fR and \fB--timestop\fR to be UTC.
.TP
\fB--localtz\fR
.IP
Interpret the times given for \fB--datestart\fR, \fB--datestop\fR,
\fB--timestart\fR and \fB--timestop\fR to be local kernel time. (Default)
.PP
EXAMPLES. To match on weekends, use:
.IP
-m time --weekdays Sa,Su
.PP
Or, to match (once) on a national holiday block:
.IP
-m time --datestart 2007-12-24 --datestop 2007-12-27
.PP
Since the stop time is actually inclusive, you would need the following stop
time to not match the first second of the new day:
.IP
-m time --datestart 2007-01-01T17:00 --datestop 2007-01-01T23:59:59
.PP
During lunch hour:
.IP
-m time --timestart 12:30 --timestop 13:30
.PP
The fourth Friday in the month:
.IP
-m time --weekdays Fr --monthdays 22,23,24,25,26,27,28
.PP
(Note that this exploits a certain mathematical property. It is not possible to
say "fourth Thursday OR fourth Friday" in one rule. It is possible with
multiple rules, though.)
.SS u32
U32 tests whether quantities of up to 4 bytes extracted from a packet have
specified values. The specification of what to extract is general enough to
find data at given offsets from tcp headers or payloads.
.TP
[\fB!\fR]\fB --u32 \fItests\fR
The argument amounts to a program in a small language described below.
.IP
tests := location "=" value | tests "&&" location "=" value
.IP
value := range | value "," range
.IP
range := number | number ":" number
.PP
a single number, \fIn\fR, is interpreted the same as \fIn:n\fR. \fIn:m\fR is
interpreted as the range of numbers \fB>=n\fR and \fB<=m\fR.
.IP "" 4
location := number | location operator number
.IP "" 4
operator := "&" | "<<" | ">>" | "@"
.PP
The operators \fB&\fR, \fB<<\fR, \fB>>\fR and \fB&&\fR mean the same as in C.
The \fB=\fR is really a set membership operator and the value syntax describes
a set. The \fB@\fR operator is what allows moving to the next header and is
described further below.
.PP
There are currently some artificial implementation limits on the size of the
tests:
.IP "    *"
no more than 10 of "\fB=\fR" (and 9 "\fB&&\fR"s) in the u32 argument
.IP "    *"
no more than 10 ranges (and 9 commas) per value
.IP "    *"
no more than 10 numbers (and 9 operators) per location
.PP
To describe the meaning of location, imagine the following machine that
interprets it. There are three registers:
.IP
A is of type \fBchar *\fR, initially the address of the IP header
.IP
B and C are unsigned 32 bit integers, initially zero
.PP
The instructions are:
.IP
number B = number;
.IP
C = (*(A+B)<<24) + (*(A+B+1)<<16) + (*(A+B+2)<<8) + *(A+B+3)
.IP
&number C = C & number
.IP
<< number C = C << number
.IP
>> number C = C >> number
.IP
@number A = A + C; then do the instruction number
.PP
Any access of memory outside [skb->data,skb->end] causes the match to fail.
Otherwise the result of the computation is the final value of C.
.PP
Whitespace is allowed but not required in the tests. However, the characters
that do occur there are likely to require shell quoting, so it is a good idea
to enclose the arguments in quotes.
.PP
Example:
.IP
match IP packets with total length >= 256
.IP
The IP header contains a total length field in bytes 2-3.
.IP
--u32 "\fB0 & 0xFFFF = 0x100:0xFFFF\fR"
.IP
read bytes 0-3
.IP
AND that with 0xFFFF (giving bytes 2-3), and test whether that is in the range
[0x100:0xFFFF]
.PP
Example: (more realistic, hence more complicated)
.IP
match ICMP packets with icmp type 0
.IP
First test that it is an ICMP packet, true iff byte 9 (protocol) = 1
.IP
--u32 "\fB6 & 0xFF = 1 &&\fR ...
.IP
read bytes 6-9, use \fB&\fR to throw away bytes 6-8 and compare the result to
1. Next test that it is not a fragment. (If so, it might be part of such a
packet but we cannot always tell.) N.B.: This test is generally needed if you
want to match anything beyond the IP header. The last 6 bits of byte 6 and all
of byte 7 are 0 iff this is a complete packet (not a fragment). Alternatively,
you can allow first fragments by only testing the last 5 bits of byte 6.
.IP
 ... \fB4 & 0x3FFF = 0 &&\fR ...
.IP
Last test: the first byte past the IP header (the type) is 0. This is where we
have to use the @syntax. The length of the IP header (IHL) in 32 bit words is
stored in the right half of byte 0 of the IP header itself.
.IP
 ... \fB0 >> 22 & 0x3C @ 0 >> 24 = 0\fR"
.IP
The first 0 means read bytes 0-3, \fB>>22\fR means shift that 22 bits to the
right. Shifting 24 bits would give the first byte, so only 22 bits is four
times that plus a few more bits. \fB&3C\fR then eliminates the two extra bits
on the right and the first four bits of the first byte. For instance, if IHL=5,
then the IP header is 20 (4 x 5) bytes long. In this case, bytes 0-1 are (in
binary) xxxx0101 yyzzzzzz, \fB>>22\fR gives the 10 bit value xxxx0101yy and
\fB&3C\fR gives 010100. \fB@\fR means to use this number as a new offset into
the packet, and read four bytes starting from there. This is the first 4 bytes
of the ICMP payload, of which byte 0 is the ICMP type. Therefore, we simply
shift the value 24 to the right to throw out all but the first byte and compare
the result with 0.
.PP
Example:
.IP
TCP payload bytes 8-12 is any of 1, 2, 5 or 8
.IP
First we test that the packet is a tcp packet (similar to ICMP).
.IP
--u32 "\fB6 & 0xFF = 6 &&\fR ...
.IP
Next, test that it is not a fragment (same as above).
.IP
 ... \fB0 >> 22 & 0x3C @ 12 >> 26 & 0x3C @ 8 = 1,2,5,8\fR"
.IP
\fB0>>22&3C\fR as above computes the number of bytes in the IP header. \fB@\fR
makes this the new offset into the packet, which is the start of the TCP
header. The length of the TCP header (again in 32 bit words) is the left half
of byte 12 of the TCP header. The \fB12>>26&3C\fR computes this length in bytes
(similar to the IP header before). "@" makes this the new offset, which is the
start of the TCP payload. Finally, 8 reads bytes 8-12 of the payload and
\fB=\fR checks whether the result is any of 1, 2, 5 or 8.
.SS udp
These extensions can be used if `--protocol udp' is specified.  It
provides the following options:
.TP
.BR "--source-port " "[!] \fIport\fP[:\fIport\fP]"
Source port or port range specification.
See the description of the
.B --source-port
option of the TCP extension for details.
.TP
.BR "--destination-port " "[!] \fIport\fP[:\fIport\fP]"
Destination port or port range specification.
See the description of the
.B --destination-port
option of the TCP extension for details.
