# Makefile.in generated by automake 1.6.2 from Makefile.am.
# lib/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.


SHELL = /bin/sh

srcdir = .
top_srcdir = ..

#prefix = /usr/local
#exec_prefix = ${prefix}

#bindir = ${exec_prefix}/bin
#sbindir = ${exec_prefix}/sbin
#libexecdir = ${exec_prefix}/libexec
#datadir = ${prefix}/share
#sysconfdir = ${prefix}/etc
#sharedstatedir = ${prefix}/com
#localstatedir = ${prefix}/var
#libdir = ${exec_prefix}/lib
#infodir = ${prefix}/info
#mandir = ${prefix}/man
#includedir = ${prefix}/include
#oldincludedir = /usr/include
#pkgdatadir = $(datadir)/zebra
#pkglibdir = $(libdir)/zebra
pkgincludedir = $(includedir)/zebra
top_builddir = ..

ACLOCAL = ${SHELL} /opt/user96345/src/zebra-0.93a/missing --run aclocal-1.6
AUTOCONF = ${SHELL} /opt/user96345/src/zebra-0.93a/missing --run autoconf
AUTOMAKE = ${SHELL} /opt/user96345/src/zebra-0.93a/missing --run automake-1.6
AUTOHEADER = ${SHELL} /opt/user96345/src/zebra-0.93a/missing --run autoheader

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
INSTALL_PROGRAM = ${INSTALL}
INSTALL_DATA = ${INSTALL} -m 644
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_SCRIPT = ${INSTALL}
INSTALL_HEADER = $(INSTALL_DATA)
transform = s,x,x,
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_alias = 
host_triplet = i686-pc-linux-gnu

EXEEXT = 
OBJEXT = o
PATH_SEPARATOR = :
AMTAR = ${SHELL} /opt/user96345/src/zebra-0.93a/missing --run tar


#AR = ar
#AWK = gawk
BGPD = 
#CC = gcc


#these will be removed since they are on the top /user96345/Makefile
#TOOLCHAIN=/opt/toolchains/uclibc
#CROSS_COMPILE = $(TOOLCHAIN)/bin/mips-uclibc-
#AR              = $(CROSS_COMPILE)ar
#AS              = $(CROSS_COMPILE)as
#LD              = $(CROSS_COMPILE)ld
#CC              = $(CROSS_COMPILE)gcc
#CXX             = $(CROSS_COMPILE)g++
#CPP             = $(CROSS_COMPILE)cpp
#NM              = $(CROSS_COMPILE)nm
#STRIP           = $(CROSS_COMPILE)strip
#OBJCOPY         = $(CROSS_COMPILE)objcopy
#OBJDUMP         = $(CROSS_COMPILE)objdump
#RANLIB          = $(CROSS_COMPILE)ranlib
LIB_PATH         = $(TOOLCHAIN)/mips-linux/lib
#LIBDIR          = $(TOOLCHAIN)/mips-linux/lib
#LIBCDIR         = $(TOOLCHAIN)/mips-linux


CURSES = 
DEPDIR = .deps
IF_METHOD = if_netlink.o
IF_PROC = if_proc.o

INCLUDES =  -I.. -I$(top_srcdir) -I$(top_srcdir)/lib
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
IPFORWARD = ipforward_proc.o
KERNEL_METHOD = 
LIBPAM = 
LIB_IPV6 = 
LIB_REGEX = 
MULTIPATH_NUM = 1
OSPF6D = 
OSPFD = 
OTHER_METHOD = 
PACKAGE = zebra

RIPD = ripd
RIPNGD = 
RTREAD_METHOD = rtread_netlink.o
RT_METHOD = rt_netlink.o
STRIP = 
VERSION = 0.93a
VTYSH = 
ZEBRA = zebra
am__include = include
am__quote = 
install_sh = /opt/user96345/src/zebra-0.93a/install-sh
DEFS = -DHAVE_CONFIG_H -DSYSCONFDIR=\"$(sysconfdir)/\"

OBJPREFIX = $(O)/lib/
noinst_LIBRARIES = $(OBJPREFIX)libzebra.a

libzebra_a_SOURCES = \
	version.c network.c pid_output.c getopt.c getopt1.c daemon.c \
	checksum.c vector.c linklist.c vty.c command.c \
	sockunion.c prefix.c thread.c if.c memory.c table.c hash.c \
	distribute.c stream.c str.c \
	zclient.c sockopt.c smux.c md5.c keychain.c

ifneq ($(strip $(BUILD_RIP_AUTH)),)
libzebra_a_SOURCES += buffer.c log.c filter.c print_version.c
libzebra_a_SOURCES += if_rmap.c routemap.c plist.c
endif

libzebra_a_DEPENDENCIES = 

libzebra_a_LIBADD = 

noinst_HEADERS = \
	command.h getopt.h hash.h if.h linklist.h \
	memory.h network.h prefix.h distribute.h sockunion.h \
	str.h stream.h table.h thread.h vector.h version.h vty.h zebra.h \
	zclient.h sockopt.h smux.h md5-gnu.h keychain.h

ifneq ($(strip $(BUILD_RIP_AUTH)),)
noinst_HEADERS += buffer.h log.h filter.h plist.h if_rmap.h routemap.h 
endif

EXTRA_DIST = regex.c regex-gnu.h
subdir = lib
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
LIBRARIES = $(noinst_LIBRARIES)


libzebra_a_AR = $(AR) rcs


am_libzebra_a_OBJECTS = $(OBJPREFIX)version.$(OBJEXT) $(OBJPREFIX)network.$(OBJEXT) \
	$(OBJPREFIX)pid_output.$(OBJEXT) $(OBJPREFIX)getopt.$(OBJEXT) $(OBJPREFIX)getopt1.$(OBJEXT) \
	$(OBJPREFIX)daemon.$(OBJEXT) $(OBJPREFIX)checksum.$(OBJEXT) \
	$(OBJPREFIX)vector.$(OBJEXT) $(OBJPREFIX)linklist.$(OBJEXT) $(OBJPREFIX)vty.$(OBJEXT) \
	$(OBJPREFIX)command.$(OBJEXT) $(OBJPREFIX)sockunion.$(OBJEXT) $(OBJPREFIX)prefix.$(OBJEXT) \
	$(OBJPREFIX)thread.$(OBJEXT) $(OBJPREFIX)if.$(OBJEXT) $(OBJPREFIX)memory.$(OBJEXT) \
	$(OBJPREFIX)table.$(OBJEXT) $(OBJPREFIX)hash.$(OBJEXT) \
	$(OBJPREFIX)distribute.$(OBJEXT) $(OBJPREFIX)stream.$(OBJEXT) \
	$(OBJPREFIX)str.$(OBJEXT) $(OBJPREFIX)zclient.$(OBJEXT) \
	$(OBJPREFIX)sockopt.$(OBJEXT) $(OBJPREFIX)smux.$(OBJEXT) $(OBJPREFIX)md5.$(OBJEXT) \
	$(OBJPREFIX)keychain.$(OBJEXT)

ifneq ($(strip $(BUILD_RIP_AUTH)),)
am_libzebra_a_OBJECTS += $(OBJPREFIX)buffer.$(OBJEXT) $(OBJPREFIX)log.$(OBJEXT) $(OBJPREFIX)filter.$(OBJEXT) $(OBJPREFIX)print_version.$(OBJEXT) 
am_libzebra_a_OBJECTS += $(OBJPREFIX)if_rmap.$(OBJEXT) $(OBJPREFIX)plist.$(OBJEXT) $(OBJPREFIX)routemap.$(OBJEXT)
endif

libzebra_a_OBJECTS = $(am_libzebra_a_OBJECTS)
DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
CPPFLAGS = 


depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles

#DEP_FILES = ./$(DEPDIR)/buffer.Po ./$(DEPDIR)/checksum.Po \
#	./$(DEPDIR)/command.Po ./$(DEPDIR)/daemon.Po \
#	./$(DEPDIR)/distribute.Po ./$(DEPDIR)/filter.Po \
#	./$(DEPDIR)/getopt.Po ./$(DEPDIR)/getopt1.Po \
#	./$(DEPDIR)/hash.Po ./$(DEPDIR)/if.Po \
#	./$(DEPDIR)/if_rmap.Po ./$(DEPDIR)/keychain.Po \
#	./$(DEPDIR)/linklist.Po ./$(DEPDIR)/log.Po \
#	./$(DEPDIR)/md5.Po ./$(DEPDIR)/memory.Po \
#	./$(DEPDIR)/network.Po ./$(DEPDIR)/pid_output.Po \
#	./$(DEPDIR)/plist.Po ./$(DEPDIR)/prefix.Po \
#	./$(DEPDIR)/print_version.Po \
#	./$(DEPDIR)/routemap.Po ./$(DEPDIR)/smux.Po \
#	./$(DEPDIR)/sockopt.Po ./$(DEPDIR)/sockunion.Po \
#	./$(DEPDIR)/str.Po ./$(DEPDIR)/stream.Po \
#	./$(DEPDIR)/table.Po ./$(DEPDIR)/thread.Po \
#	./$(DEPDIR)/vector.Po ./$(DEPDIR)/version.Po \
#	./$(DEPDIR)/vty.Po ./$(DEPDIR)/zclient.Po

DEP_FILES = ./$(DEPDIR)/checksum.Po \
	./$(DEPDIR)/command.Po ./$(DEPDIR)/daemon.Po \
	./$(DEPDIR)/distribute.Po \
	./$(DEPDIR)/getopt.Po ./$(DEPDIR)/getopt1.Po \
	./$(DEPDIR)/hash.Po ./$(DEPDIR)/if.Po \
	./$(DEPDIR)/linklist.Po \
	./$(DEPDIR)/memory.Po \
	./$(DEPDIR)/network.Po ./$(DEPDIR)/pid_output.Po \
	./$(DEPDIR)/prefix.Po \
	./$(DEPDIR)/smux.Po \
	./$(DEPDIR)/sockopt.Po ./$(DEPDIR)/sockunion.Po \
	./$(DEPDIR)/str.Po ./$(DEPDIR)/stream.Po \
	./$(DEPDIR)/table.Po ./$(DEPDIR)/thread.Po \
	./$(DEPDIR)/vector.Po ./$(DEPDIR)/version.Po \
	./$(DEPDIR)/vty.Po ./$(DEPDIR)/zclient.Po
#	./$(DEPDIR)/zclient.Po

ifneq ($(strip $(BUILD_RIP_AUTH)),)
DEP_FILES +=  ./$(DEPDIR)/buffer.Po ./$(DEPDIR)/log.Po ./$(DEPDIR)/filter.Po
DEP_FILES +=  ./$(DEPDIR)/print_version.Po ./$(DEPDIR)/if_rmap.Po 
DEP_FILES +=  ./$(DEPDIR)/if_rmap.Po ./$(DEPDIR)/routemap.Po ./$(DEPDIR)/plist.Po
endif

COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
#LINK = $(LD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@

#for debug, add -DBRCM_RIP_DEBUG; command support, add -DDBRCM_CMD_SUPPORT;
#access/filter list support, add -DDBRCM_LIST_SUPPORT
CFLAGS= -s -Os -fomit-frame-pointer -L$(LIB_PATH)

ifneq ($(strip $(BUILD_RIP_AUTH)),)
CFLAGS += -DATP_RIP_SUPPORT
endif

DIST_SOURCES = $(libzebra_a_SOURCES)
HEADERS = $(noinst_HEADERS)

DIST_COMMON = $(noinst_HEADERS) ChangeLog Makefile.am Makefile.in
SOURCES = $(libzebra_a_SOURCES)

all: all-am

.SUFFIXES:
.SUFFIXES: .c .o .obj
#$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)
#	cd $(top_srcdir) && \
#	  $(AUTOMAKE) --foreign  lib/Makefile
#Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
#	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)

clean-noinstLIBRARIES:
	-test -z "$(noinst_LIBRARIES)" || rm -f $(noinst_LIBRARIES)
$(OBJPREFIX)libzebra.a: $(libzebra_a_OBJECTS) $(libzebra_a_DEPENDENCIES) 
	-rm -f $(OBJPREFIX)libzebra.a
	$(libzebra_a_AR) $(OBJPREFIX)libzebra.a $(libzebra_a_OBJECTS) $(libzebra_a_LIBADD)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c


ifneq ($(strip $(BUILD_RIP_AUTH)),)
#include ./$(DEPDIR)/buffer.Po
#include ./$(DEPDIR)/log.Po
#include ./$(DEPDIR)/filter.Po
#include ./$(DEPDIR)/print_version.Po
#include ./$(DEPDIR)/if_rmap.Po
#include ./$(DEPDIR)/plist.Po
#include ./$(DEPDIR)/routemap.Po
endif

#include ./$(DEPDIR)/checksum.Po
#include ./$(DEPDIR)/command.Po
#include ./$(DEPDIR)/daemon.Po
#include ./$(DEPDIR)/distribute.Po
#include ./$(DEPDIR)/getopt.Po
#include ./$(DEPDIR)/getopt1.Po
#include ./$(DEPDIR)/hash.Po
#include ./$(DEPDIR)/if.Po
#include ./$(DEPDIR)/keychain.Po
#include ./$(DEPDIR)/linklist.Po
#include ./$(DEPDIR)/md5.Po
#include ./$(DEPDIR)/memory.Po
#include ./$(DEPDIR)/network.Po
#include ./$(DEPDIR)/pid_output.Po
#include ./$(DEPDIR)/prefix.Po
#include ./$(DEPDIR)/smux.Po
#include ./$(DEPDIR)/sockopt.Po
#include ./$(DEPDIR)/sockunion.Po
#include ./$(DEPDIR)/str.Po
#include ./$(DEPDIR)/stream.Po
#include ./$(DEPDIR)/table.Po
#include ./$(DEPDIR)/thread.Po
#include ./$(DEPDIR)/vector.Po
#include ./$(DEPDIR)/version.Po
#include ./$(DEPDIR)/vty.Po
#include ./$(DEPDIR)/zclient.Po

distclean-depend:
	-rm -rf ./$(DEPDIR)

#.c.o:
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `test -f '$<' || echo '$(srcdir)/'`$<
$(OBJPREFIX)%.o:%.c
	mkdir -p $(OBJPREFIX)
	source='$<' object='$@' libtool=no \
	$(COMPILE) -c `test -f '$<' || echo '$(srcdir)/'`$< -o $@

.c.obj:
	source='$<' object='$@' libtool=no \
	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
	$(CCDEPMODE) $(depcomp) \
	$(COMPILE) -c `cygpath -w $<`
CCDEPMODE = depmode=gcc3
uninstall-info-am:

ETAGS = etags
ETAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@list='$(DISTFILES)'; for file in $$list; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES) $(HEADERS)

installdirs:

install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-noinstLIBRARIES mostlyclean-am

distclean: distclean-am

distclean-am: clean-am distclean-compile distclean-depend \
	distclean-generic distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am:

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

uninstall-am: uninstall-info-am

.PHONY: GTAGS all all-am check check-am clean clean-generic \
	clean-noinstLIBRARIES distclean distclean-compile \
	distclean-depend distclean-generic distclean-tags distdir dvi \
	dvi-am info info-am install install-am install-data \
	install-data-am install-exec install-exec-am install-info \
	install-info-am install-man install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic tags uninstall uninstall-am \
	uninstall-info-am


version.c: Makefile
	echo '' >version.c
	echo 'char *host_name = "$(host_triplet)";' >>version.c
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
